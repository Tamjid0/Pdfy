
PS J:\pdfyy\server> node server.js
file:///J:/pdfyy/server/scraper.js:31
            const chatData = await page.evaluate(() => {\n              const messages = [];\n              const proseElements = document.querySelectorAll('.prose');\n\n              proseElements.forEach(contentEl => {\n                const turn = contentEl.closest('div[data-testid^=\"conversation-turn-\"]');\n                const authorEl = turn ? turn.querySelector('.font-semibold') : null;\n\n                const author =\n                  authorEl ? authorEl.innerText.trim() : 'unknown';\n               
 let content = '';\n\n                contentEl.childNodes.forEach(node => {\n                  if (node.nodeType === Node.TEXT_NODE) {\n                    content += node.textContent;\n                  } else if (node.nodeType === Node.ELEMENT_NODE) {\n                    if (node.tagName === 'STRONG') {\n                      content += `**${node.textContent}**`;\n                    } else if (node.tagName === 'EM') {\n                      content += `*${node.textContent}*`;\n                    } else if (node.tagName === 'CODE') {\n                      content += `\`${node.textContent}\``;\n                    } else if (node.tagName === 'PRE') {\n                      content += `\\n```\\n${node.querySelector('code').textContent}\\n```\\n`;\n                    } else if (node.tagName === 'BR') {\n                      content += '\\n';\n                    } else if (node.classList.contains('katex')) {\n                      const annotation = node.querySelector('annotation[encoding=\"application/x-tex\"]');\n                      if (annotation) {\n                        content += `\\\\(${annotation.textContent}\\\\)`;\n                      }\n                    } else if (node.tagName === 'P') {\n                        content += node.textContent + '\\n';\n                    } else if (node.tagName === 'HR') {\n                        content += '---\\n';\n                    }\n                  }\n                });\n\n                messages.push({ author, content: content.trim() });\n              });\n\n              return messages;\n            });
                                                        ^

SyntaxError: Invalid or unexpected token
    at compileSourceTextModule (node:internal/modules/esm/utils:346:16)
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:107:18)
    at #translate (node:internal/modules/esm/loader:546:20)
    at afterLoad (node:internal/modules/esm/loader:596:29)
    at ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:601:12)
    at #createModuleJob (node:internal/modules/esm/loader:624:36)
    at #getJobFromResolveResult (node:internal/modules/esm/loader:343:34)
    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:311:41)

Node.js v22.21.0